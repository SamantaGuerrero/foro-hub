package com.alura.forohub.security; import com.alura.forohub.repository.UsuarioRepository; import jakarta.servlet.*; import jakarta.servlet.http.*; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.web.authentication.WebAuthenticationDetailsSource; import org.springframework.stereotype.Component; import org.springframework.web.filter.OncePerRequestFilter; import java.io.IOException; @Component public class JwtAuthFilter extends OncePerRequestFilter { private final JwtTokenService jwtTokenService; private final UsuarioRepository usuarioRepository; public JwtAuthFilter(JwtTokenService s, UsuarioRepository r){this.jwtTokenService=s; this.usuarioRepository=r;} @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws ServletException, IOException { String header=request.getHeader("Authorization"); if(header!=null && header.startsWith("Bearer ")){ String token=header.substring(7); try{ String username=jwtTokenService.extractUsername(token); if(username!=null && SecurityContextHolder.getContext().getAuthentication()==null){ UserDetails user=usuarioRepository.findByEmail(username).orElse(null); if(user!=null){ var auth=new UsernamePasswordAuthenticationToken(user,null,user.getAuthorities()); auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request)); SecurityContextHolder.getContext().setAuthentication(auth); } } }catch(Exception ignored){} } chain.doFilter(request,response);} }